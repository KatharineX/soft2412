
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package whynot22;
import java.util.ArrayList;
import java.io.InputStream;
import java.lang.System;
import java.io.File;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.lang.Math;
import java.io.PrintStream;



public class CurrencyRatesTest {
  /*
  ================================================================
  Below case is testing display Functions in Currency Rates class
  ================================================================
  */

  @Test
  public void displaying(){
    //set up
    CurrencyRates test = new CurrencyRates();
    boolean retValue = test.initialDisplay();
    assertTrue(retValue);
    retValue = test.secondDisplay();
    assertTrue(retValue);
    return;
  }

  /*
  ================================================================
  Below case is testing takeInput Function in Currency Rates class
  ================================================================
  */
  @Test
  public void testTooManyInput(){
    //set up
    CurrencyRates test = new CurrencyRates();

    //add sample user input
    InputStream in = new ByteArrayInputStream("ABC123 BCD234 WER456 FDG435".getBytes());
    System.setIn(in);

    //test if system exits when user input is incorrect
    assertNull(test.takeInput());

    return;
  }

  @Test
  public void testIfTakeInputFunctionWorks(){
    //set up
    CurrencyRates test = new CurrencyRates();
    ArrayList<String> expectedOutput = new ArrayList<String>();
    expectedOutput.add("ABD123");
    expectedOutput.add("BCD123");

    //add sample user input
    InputStream in = new ByteArrayInputStream("ABD123 BCD123".getBytes());
    System.setIn(in);

    //test if system exits when user input is incorrect
    assertEquals(expectedOutput, test.takeInput());
    return;
  }

  /*
  ================================================================
  Below cases are testing Extract Function in Currency Rates class
  ================================================================
  */

  // Testing for a null input
  @Test
  public void testExtractFunctionCheckNull(){
    // set up
    CurrencyRates test = new CurrencyRates();

    // run extract function
    ArrayList<Pair> nullCase = test.extractFunction(null);

    // assert checks if extract function returns null
    assertNull(nullCase);
  }

  @Test
  public void testExtractFunctionForSingleNullValue() {
    // set up
    CurrencyRates test = new CurrencyRates();
    ArrayList<String> nullCase = new ArrayList<String>();
    nullCase.add("50SGD");
    nullCase.add(null);

    // run extract function
    ArrayList<Pair> output = test.extractFunction(nullCase);

    // use assert statement to check output is null;
    assertNull(output);

    return;
  }

  //tests if user only inputs number or only inputs currency, e.g. 100 and not 100AUD
  @Test
  public void testExtractFunctionMissingCounterPart(){
    //set up
    CurrencyRates rates = new CurrencyRates();
    ArrayList<String> test = new ArrayList<String>();
    test.add("100");

    // run extract function
    ArrayList<Pair> badCase = rates.extractFunction(test);

    // assert checks if extract function returns null
    assertNull(badCase);
  }


  // testing that arraylength is not greater than length 3
  @Test
  public void testExtractFunctionCheckLengthLessThanFour(){
    // standard set up
    CurrencyRates rates = new CurrencyRates();
    ArrayList<String> test = new ArrayList<String>();
    test.add("100AUD");
    test.add("60SGD");
    test.add("87JPY");
    test.add("26SGD");

    ArrayList<Pair> nullCase = rates.extractFunction(test);

    // if array length is greater than 3 or equal to 0 extract function should return null
    // assert statement below checks this to be true
    assertNull(nullCase);
    return;
  }

  // testing for when input arraylist length is 0
  @Test
  public void testExtractFunctionCheckLengthNotZero() {
    // standard set up
    CurrencyRates rates = new CurrencyRates();
    ArrayList<String> test = new ArrayList<String>();

    ArrayList<Pair> nullCase = rates.extractFunction(test);

    // if array length is 0 extract function should return null
    // assert statement below checks this to be true
    assertNull(nullCase);
    return;
  }

  // testing for when an incorrect currency is specified
  @Test
  public void testExtractFunctionForIncorrectCurrency() {
    // set up
    CurrencyRates rates = new CurrencyRates();

    // creating test array string setup
    ArrayList<String> input = new ArrayList<String>();
    input.add("15CNY");

    // running test array through extract function
    ArrayList<Pair> output = rates.extractFunction(input);

    // using assert to check output is null
    assertNull(output);
    return;
  }

  // test to check if input is provided in correct form
  // ie "100USDA" is not accepted
  @Test
  public void testExtractFunctionCheckInputFormat() {
    // set up
    CurrencyRates rates = new CurrencyRates();

    // creating test array string setup
    ArrayList<String> input = new ArrayList<String>();
    input.add("100USDA");

    // running test array through extract function
    ArrayList<Pair> output = rates.extractFunction(input);

    // using assert to check output is null
    assertNull(output);
    return;
  }

  // testing standard string to pair output

  @Test
  public void testExtractFunctionStandardStringToPairOutput() {
    // standard set up of creating correct outcomes
    CurrencyRates rates = new CurrencyRates();
    ArrayList<Pair> correctOutput = new ArrayList<Pair>();
    correctOutput.add(new Pair(100.5, "AUD"));
    correctOutput.add(new Pair(50.5, "SGD"));

    // creating test outcomes
    ArrayList<String> test = new ArrayList<String>();
    test.add("100.5AUD");
    test.add("50.5SGD");

    // running test through extract function
    ArrayList<Pair> testOutput = rates.extractFunction(test);

    // if extract function matches the correct output then no error
    // otherwise assert will throw error and fail test
    Pair currentCorrect;
    Pair currentCheck;
    for (int i = 0; i < testOutput.size(); i ++) {
      currentCheck = testOutput.get(i);
      currentCorrect = correctOutput.get(i);
      assertTrue(currentCorrect.getVal() == currentCheck.getVal());
      assertTrue(currentCorrect.getER().equals(currentCheck.getER()));
    }
    return;
  }

  @Test
  public void testExtractFunctionInvalidValue() {
    // set up
    CurrencyRates rates = new CurrencyRates();

    // creating test array string setup
    ArrayList<String> input = new ArrayList<String>();
    input.add("A100.0USD");

    // running test array through extract function
    ArrayList<Pair> output = rates.extractFunction(input);

    // using assert to check output is null
    assertNull(output);
    return;
  }

  @Test
  public void testExtractFunctionInvalidValue2() {
    // set up
    CurrencyRates rates = new CurrencyRates();

    // creating test array string setup
    ArrayList<String> input = new ArrayList<String>();
    input.add("1X0B0.0USD");

    // running test array through extract function
    ArrayList<Pair> output = rates.extractFunction(input);

    // using assert to check output is null
    assertNull(output);
    return;
  }


    /*
    =====================================================================
    Below cases are testing convertToAUD Function in Currency Rates class
    =====================================================================
    */

    @Test
    public void testconvertToAUDNullInputCheck() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // passing null value
      ArrayList<Double> output = rates.convertToAUD(null);

      // asserting to check null
      assertNull(output);
    }

    @Test
    public void testconvertToAUDcheckLengthNotZero() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayLIst<pair> with zero values
      ArrayList<Pair> zero = new ArrayList<Pair>();

      ArrayList<Double> finalrv = rates.convertToAUD(zero);
      assertNull(finalrv);
    }

    @Test
    public void testconvertToAUDcheckLengthLessThanFour() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayLIst<pair> with 4 values
      ArrayList<Pair> four = new ArrayList<Pair>();
      four.add(new Pair(100, "AUD"));
      four.add(new Pair(20, "JNY"));
      four.add(new Pair(5, "SGD"));
      four.add(new Pair(232, "USD"));

      ArrayList<Double> finalrv = rates.convertToAUD(four);
      assertNull(finalrv);
    }

    @Test
    public void testconvertfromAUD() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayList<Pair> with AUD
      ArrayList<Pair> iv = new ArrayList<Pair>();
      iv.add(new Pair(100.0, "AUD"));

      // running through out converttoAUDFunction
      ArrayList<Double> rv = rates.convertToAUD(iv);

      // creating correct ouput;
      ArrayList<Double> correct = new ArrayList<Double>();
      correct.add(100.0);

      double current;
      double check;
      for (int i = 0; i < rv.size(); i ++) {
        current = rv.get(i);
        check = correct.get(i);
        assertTrue(Math.round(current) == Math.round(check));
      }

    }

    @Test
    public void testconvertfromUSD() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayList<Pair> with AUD
      ArrayList<Pair> iv = new ArrayList<Pair>();
      iv.add(new Pair(69.0, "USD"));

      // running through out converttoAUDFunction
      ArrayList<Double> rv = rates.convertToAUD(iv);

      // creating correct ouput;
      ArrayList<Double> correct = new ArrayList<Double>();
      correct.add(100.0);

      double current;
      double check;
      for (int i = 0; i < rv.size(); i ++) {
        current = rv.get(i);
        check = correct.get(i);
        assertTrue(Math.round(current) == Math.round(check));
      }
    }

    @Test
    public void testconvertfromSGD() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayList<Pair> with AUD
      ArrayList<Pair> iv = new ArrayList<Pair>();
      iv.add(new Pair(95.0, "SGD"));

      // running through out converttoAUDFunction
      ArrayList<Double> rv = rates.convertToAUD(iv);

      // creating correct ouput;
      ArrayList<Double> correct = new ArrayList<Double>();
      correct.add(100.0);

      double current;
      double check;
      for (int i = 0; i < rv.size(); i ++) {
        current = rv.get(i);
        check = correct.get(i);
        assertTrue(Math.round(current) == Math.round(check));
      }
    }

    @Test
    public void testconvertfromEUR() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayList<Pair> with AUD
      ArrayList<Pair> iv = new ArrayList<Pair>();
      iv.add(new Pair(62.0, "EUR"));

      // running through out converttoAUDFunction
      ArrayList<Double> rv = rates.convertToAUD(iv);

      // creating correct ouput;
      ArrayList<Double> correct = new ArrayList<Double>();
      correct.add(100.0);

      double current;
      double check;
      for (int i = 0; i < rv.size(); i ++) {
        current = rv.get(i);
        check = correct.get(i);
        assertTrue(Math.round(current) == Math.round(check));
      }
    }

    @Test
    public void testconvertfromJPY() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayList<Pair> with AUD
      ArrayList<Pair> iv = new ArrayList<Pair>();
      iv.add(new Pair(7374.0, "JPY"));

      // running through out converttoAUDFunction
      ArrayList<Double> rv = rates.convertToAUD(iv);

      // creating correct ouput;
      ArrayList<Double> correct = new ArrayList<Double>();
      correct.add(100.0);

      double current;
      double check;
      for (int i = 0; i < rv.size(); i ++) {
        current = rv.get(i);
        check = correct.get(i);
        assertTrue(Math.round(current) == Math.round(check));
      }
    }

    @Test
    public void testconvertfromInvalidER() {
      // standard set up
      CurrencyRates rates = new CurrencyRates();

      // creating ArrayList<Pair> with AUD
      ArrayList<Pair> iv = new ArrayList<Pair>();
      iv.add(new Pair(7374.0, "CNY"));

      // running through out converttoAUDFunction
      ArrayList<Double> rv = rates.convertToAUD(iv);

      assertNull(rv);
    }


    /*
    ====================================================================
    Below cases are testing finalSumAUD Function in Currency Rates class
    ====================================================================
    */

    @Test
    public void finalSumTest1(){
      // set up
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      // checks if function add up all values correctly
      assertEquals(233.32, one.finalSumAUD(sumList1), 0.0);
    }


    @Test
    public void finalSumTest2(){
      //set up
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList2 = new ArrayList<Double>();
      sumList2.add(50.71);
      sumList2.add(60.60);
      sumList2.add(7.0);

      // checks if function add up all values correctly
      assertEquals(118.31, one.finalSumAUD(sumList2), 0.0);
    }

    /*
    =========================================================================
    Below cases are testing AUDtoNewCurrency Function in Currency Rates class
    =========================================================================
    */

    @Test
    public void testFinalConvertAUDStandard(){
      // set up
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      double finalSum = one.finalSumAUD(sumList1);

      //converts AUD to USD
      double retValue = one.AUDtoNewCurrency(1, one.exchangeRate, finalSum);
      assertEquals(233.32, retValue, 0.0);

    }

    @Test
    public void testFinalConvertUSDStandard(){
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      double finalSum = one.finalSumAUD(sumList1);

      //converts AUD to USD
      double retValue = one.AUDtoNewCurrency(2, one.exchangeRate, finalSum);
      assertEquals(160.99, retValue, 0.0);

    }

    // Checks final conversion from AUD to SGD
    @Test
    public void FinalConvertSGDStandard(){
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      double finalSum = one.finalSumAUD(sumList1);

      //converts AUD to SGD
      double retValue = one.AUDtoNewCurrency(3, one.exchangeRate, finalSum);
      assertEquals(221.65, retValue, 0.0);

    }

    // Checks final conversion from AUD to EUR
    @Test
    public void FinalConvertEURStandard(){
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      double finalSum = one.finalSumAUD(sumList1);

      //converts AUD to EUR
      double retValue = one.AUDtoNewCurrency(4, one.exchangeRate, finalSum);
      assertEquals(144.66, retValue, 0.0);

    }

    // Checks final conversion from AUD to JPY
    @Test
    public void FinalConvertJPYStandard(){
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      double finalSum = one.finalSumAUD(sumList1);

      //converts AUD to JPY
      double retValue = one.AUDtoNewCurrency(5, one.exchangeRate, finalSum);
      assertEquals(17205.02, retValue, 0.0);

    }

    @Test
    public void FinalConvertFail(){
      CurrencyRates one = new CurrencyRates();

      //Initialise list of sums
      ArrayList<Double> sumList1 = new ArrayList<Double>();
      sumList1.add(10.50);
      sumList1.add(11.50);
      sumList1.add(80.00);
      sumList1.add(10.12);
      sumList1.add(50.60);
      sumList1.add(70.60);

      double finalSum = one.finalSumAUD(sumList1);

      //converts AUD to JPY
      double retValue = one.AUDtoNewCurrency(6, one.exchangeRate, finalSum);
      assertEquals(-1, retValue, 0.0);

    }

    /*
    =====================================
    Below cases are testing Main Function
    =====================================
    */

    @Test
    public void testMain() {
      String simulatedUserInput = "100AUD" + System.getProperty("line.separator")
          + "1" + System.getProperty("line.separator");

      InputStream savedStandardInputStream = System.in;
      System.setIn(new ByteArrayInputStream(simulatedUserInput.getBytes()));

      mainFunction mainfunc = new mainFunction();

      try {
        mainfunc.start();
      } catch(Exception e) {
        System.out.println("Exception!");
      }

      assertEquals(1,1);
    }

    /*
    =========================================================================
    Below cases are testing desiredCurNumberConversion Function in Currency Rates class
    =========================================================================
    */

    @Test
    public void desiredCurNumberConversionUSD(){
      //standard set up
      CurrencyRates one = new CurrencyRates();
      //checks if 2 corresponds to USD
      assertEquals("USD", one.desiredCurNumberConversion(2));
    }

    @Test
    public void desiredCurNumberConversionSGD(){
      CurrencyRates one = new CurrencyRates();
      //checks if 3 corresponds to SGD
      assertEquals("SGD", one.desiredCurNumberConversion(3));
    }

    @Test
    public void desiredCurNumberConversionEUR(){
      //checks if 4 corresponds to EUR
      CurrencyRates one = new CurrencyRates();
      assertEquals("EUR", one.desiredCurNumberConversion(4));
    }

    @Test
    public void desiredCurNumberConversionJPY(){
      CurrencyRates one = new CurrencyRates();
      //checks if 4 corresponds to JPY
      assertEquals("JPY", one.desiredCurNumberConversion(5));
    }


    @Test
    public void runAgainYes(){
      //standard set up
      CurrencyRates one = new CurrencyRates();
      //checks if input "yes" or "y" returns 1 for correct input
      assertEquals(1, one.runAgain("yes"));
      assertEquals(1, one.runAgain("y"));

    }

    @Test
    public void runAgainNo(){
      //standard set up
      CurrencyRates one = new CurrencyRates();
      //checks if input "no" or "n" returns 1 for correct input
      assertEquals(1, one.runAgain("no"));
      assertEquals(1, one.runAgain("n"));


    }

    @Test
    public void runAgainOther(){
      //standard set up
      CurrencyRates one = new CurrencyRates();
      //accounts for input that is not y/n and returns 2
      assertEquals(2, one.runAgain("i'm a rebel"));

    }
}
