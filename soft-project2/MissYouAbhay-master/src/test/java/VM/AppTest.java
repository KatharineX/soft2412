/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package VM;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.*;
import java.util.ArrayList;

public class AppTest {
  /*
  =====================================================================
  Below case is testing inputPairForm Function in Vending Machine class
  =====================================================================
  */
  //check if the method works with the correct format of <itemName> and <Quantity>
  @Test
  public void checkCapitalInputTest() {
    VendingMachine vm = new VendingMachine();
    String userInput = "wAter 1";
    Pair actualPairOutput = vm.inputPairForm(userInput);
    assertEquals("water", actualPairOutput.getItem());
  }

  //checks if the quantity is correct in the returned pair
  @Test
  public void checkCorrectQuantityTest() {
    VendingMachine vm = new VendingMachine();
    String userInput = "wAter 3";
    Pair actualPairOutput = vm.inputPairForm(userInput);
    assertEquals(3, actualPairOutput.getQuantity());
  }

  //checks if Pair is created when the item name is more than one word
  @Test
  public void checkTwoItemNameTest(){
    VendingMachine vm = new VendingMachine();
    Pair actual = vm.inputPairForm("jelly beans 2");
    Pair test = new Pair("jellybeans", 2);
    assertEquals("jellybeans", test.getItem());
  }

  //check if the admin item is recognised
  @Test
  public void checkAdminItemTest() {
    VendingMachine vm = new VendingMachine();
    String userInput = "1111";
    Pair pairForm = new Pair(userInput, 1);
    assertEquals(userInput, pairForm.getItem());
  }

  //check if the admin quantity is recognised
  @Test
  public void checkAdminQuantityTest() {
    VendingMachine vm = new VendingMachine();
    String userInput = "1111";
    Pair pairForm = new Pair(userInput, 1);
    assertEquals(1, pairForm.getQuantity());
  }

  //check that if the input form is <quantity><item name> then null is returned
  @Test
  public void checkWrongInputFormatTest(){
    VendingMachine vm = new VendingMachine();
    assertNull(vm.inputPairForm("2 water"));
  }

  /*
  =====================================================================
  Below case is testing checkInput Function in Vending Machine class
  =====================================================================
  */
  //checks that the function works correctly with the correct quantity and item
  @Test
  public void checkCorrectQuantityAndItemTest() {
    VendingMachine vm = new VendingMachine();
    Pair pairForm = new Pair("water", 1);
    assertEquals(0, vm.checkInput(pairForm));
  }

  //check that function returns 1 when item is incorrect but quantity is sufficient
  @Test
  public void checkIncorrectItemTest() {
    VendingMachine vm = new VendingMachine();
    Pair pairForm = new Pair("rainbows", 1);
    assertEquals(1, vm.checkInput(pairForm));
  }

  //check that function returns 2 when item is correct but quantity is insufficient
  @Test
  public void checkIncorrectQuantityTest() {
    VendingMachine vm = new VendingMachine();
    Pair pairForm = new Pair("water", 200);
    assertEquals(2, vm.checkInput(pairForm));
  }

  //check that function returns 3 when item and quantity is null
  // @Test
  // public void checkNullItemQuantityTest() {
  //   VendingMachine vm = new VendingMachine();
  //   Pair pairForm = null;
  //   assertEquals(3, vm.checkInput(pairForm));
  // }

  /*
  =====================================================================
  Below case is testing obtainInput Function in Vending Machine class
  =====================================================================
  */
  //check that the function returns true when customer purchase is valid
  // @Test
  // public void TestInvalidItemName() {
  //   VendingMachine vm = new VendingMachine();
  //   InputStream in = new ByteArrayInputStream("mnm 5".getBytes());
  //   System.setIn(in);
  //   assertTrue(vm.obtainInput());
  // }


  /*
  =====================================================================
  Below case is testing moreInput Function in Vending Machine class
  =====================================================================
  */
  @Test
  public void testYesMoreInput() {
    VendingMachine vm = new VendingMachine();
    String input = "yes";
    InputStream in = new ByteArrayInputStream(input.getBytes());
    System.setIn(in);
    assertEquals(1, vm.moreInput());
  }

  @Test
  public void testNoMoreInput() {
    VendingMachine vm = new VendingMachine();
    String input = "no";
    InputStream in = new ByteArrayInputStream(input.getBytes());
    System.setIn(in);
    assertEquals(0, vm.moreInput());
  }
    /*@Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }*/

      /* ARYA //
      - stock
      - checkCashInput()
      - giveChange()
      - display()
  /*
  =====================================================================
  Below case is testing printStatement in the Stock class
  =====================================================================
  */

  @Test
  public void testStockPrint() {
    Stock stock = new Stock();
    stock.printDrinksStock();
    stock.printChocolatesStock();
    stock.printChipsStock();
    stock.printLolliesStock();
    assertEquals(true, true);
  }

  /*
  =====================================================================
  Below case is testing giveChange() method in the Vending Machine class
  =====================================================================
  */
  @Test
  public void testGiveChangeCorrectChange() {
    VendingMachine VM = new VendingMachine();
    double output = VM.giveChange(5.00, 2.70);
    assertEquals(2.3, output, 0.0001);
  }

  @Test
  public void testGiveChangeCancelledTransaction() {
    VendingMachine VM = new VendingMachine();
    double output = VM.giveChange(0.2, 2.70);
    assertEquals(-1, output, 0.0001);
  }

  /*
  =====================================================================
  Below case is testing cashInput() method in the Vending Machine class
  =====================================================================
  */

  // a cancelled transaction should return 0
  @Test
  public void testCashInputCancelledTransaction() {
    VendingMachine VM = new VendingMachine();

    String input = "cancel";
    InputStream in = new ByteArrayInputStream(input.getBytes());
    System.setIn(in);

    double output = VM.cashInput(2.70);

    assertEquals(0, output,0.0001);

  }

  // this test case will add coins to procede with the transactions
  // but then cancel the transaction midway
  // this should return the cash inputed;

  @Test
  public void testCashInputMoneyInputedButThenTransactionCancelled() {
    VendingMachine VM = new VendingMachine();

    String input = "1.00\ncancel";
    InputStream in = new ByteArrayInputStream(input.getBytes());
    System.setIn(in);

    double output = VM.cashInput(2.70);

    assertEquals(1, output,0.0001);

  }

  // this is a successfull transaction, it will first deny an invalid input
  // of 40 cents, but then continue with the transaction as user insert more
  // money than total cost

  @Test
  public void testCashInputMoneySuccessfulTransaction() {
    VendingMachine VM = new VendingMachine();

    String input = "0.40\n1.00\n2.00";
    InputStream in = new ByteArrayInputStream(input.getBytes());
    System.setIn(in);

    double output = VM.cashInput(2.70);

    assertEquals(3, output,0.0001);

  }

  /*
  =====================================================================
  Below case is testing checkCashInput() method in the Vending Machine class
  =====================================================================
  */

  // this tests if cashInput will return 0 with a input of -1. A 0 indicates a bad input
  @Test
  public void testCheckCashInputBadInput() {
    VendingMachine vm = new VendingMachine();
    assertEquals(0, vm.checkCashInput(-1));
  }


  // checking if checkCashInput() returns 1 with an input of -1
  // this 1 is to indicate a cancelled transaction
  @Test
  public void testCheckCashInputCancelledInput() {
    VendingMachine vm = new VendingMachine();
    assertEquals(1, vm.checkCashInput(-2));
  }

  // checkCashInput() should output -1 if input is not an accepted value
  // of currecy, such as 10c, 20c, 50c ...
  // an input of $0.40 will be passed, this should return -1
  @Test
  public void testCheckCashInputInputIsNotAnAcceptedValue() {
    VendingMachine vm = new VendingMachine();
    assertEquals(-1, vm.checkCashInput(0.40));
  }

  // testing if checkCashInput correctly handles a correct inputs
  // an input of 0.5 should be accepted and return 0
  @Test
  public void testCheckCashInputInputIsAcceptedValue() {
    VendingMachine vm = new VendingMachine();
    assertEquals(0, vm.checkCashInput(0.5));
  }

  /*
  =====================================================================
  Below case is testing for getPrice in the Vending Machine class
  =====================================================================
  */

  // checks if getPrice() is able to correctly calculate the cost of a
  // item in a pair
  @Test
  public void testGetPrice() {
    VendingMachine VM = new VendingMachine();
    Stock inventory = new Stock();

    // setting up our pair
    Pair test = new Pair("water",1);
    double testVal = VM.getPrice(test);

    // correct price
    double price = inventory.getDrinks().get(0).getCost();

    assertEquals(testVal, price, 0.0001);

  }
      // BARB //


      // LINA //


      // KATH //
      /*Testcases
      - when input is a random string
      - when input is valid
      - when input is "cancel"
      - when input is valid but with many whiitespaces
      */

      @Test
       public void randomString(){
         //set up
         VendingMachine VMObj = new VendingMachine();
         String input = "Enjoy your life";
         // run float convert function
         assertEquals(-1, VMObj.stringToDouble(input), 0.0001);
       }

       @Test
       public void validString(){
         //sset up
        VendingMachine VMObj = new VendingMachine();
         String input = "1.00";
         double correct = 1.00;
         // run float convert function
         assertEquals(correct, VMObj.stringToDouble(input), 0.0001);
       }

       @Test
       public void cancelString(){
         //set up
        VendingMachine VMObj = new VendingMachine();
         String input = "cancel";
         // run float convert function
         assertEquals(-2, VMObj.stringToDouble(input), 0.0001);
       }

       // not implemented in main as of yet

       // @Test
       // public void whitespaceString(){
       //   //set up
       //   VendingMachine VMObj = new VendingMachine();
       //   String input = "c    ancel";
       //   // run float convert function
       //   assertEquals(-2, VMObj.stringToDouble(input));
       // }

       /* Testcases
       - when product is not found
       - when product is found successfully
       - when null value in passed through pair.item
       */

       @Test
       public void productNotFound(){
         VendingMachine VMObj = new VendingMachine();

         Pair itemTwo = new Pair("cheetos", 1);

         assertEquals(0, VMObj.getPrice(itemTwo), 0.0001);

       }

       @Test
       public void productFound(){
         // VendingMachine VMObj = new VendingMachine();
         // Pair itemOne = new Pair("water", 1);
         // assertEquals(2.7, VMObj.getPrice(itemOne), 0.0001);
       }

       @Test
       public void nullInPair(){
         VendingMachine VMObj = new VendingMachine();
         Pair itemOne = null;
         assertEquals(0, VMObj.getPrice(itemOne), 0.0001);
       }

       /*Testcases
       - successful total cost calculation
       - unsuccessful total cost calculation - eg. item does not exist
       - when null value encountered in the customerBasket
       */

       @Test
       public void successfulTotalCostCalculation(){
         VendingMachine VMObj = new VendingMachine();
         //set up
         // ArrayList<Pair> testBasket = new ArrayList();
         //
         // Price Cheetos = $
         // Price Lollies = $
         // Pair itemOne = new Pair("Cheetos", 2);
         // Pair itemTwo = new Pair("Lollies", 2);
         //
         // testBasket.add(itemOne);
         // testBasket.add(itemTwo);
         //
         //  run float convert function
         // assertEquals(4, totalCost(testBasket));
       }

       @Test
       public void unsuccessfulTotalCostCalculation(){
         // VendingMachine VMObj = new VendingMachine();
         // ArrayList<Pair> Basket = new ArrayList<Pair>();
         //
         // Pair uno = new Pair("water", 1);
         // Pair incorrect = new Pair("cheetos", 1);
         //
         // Basket.add(uno);
         // Basket.add(incorrect);
         //
         // assertEquals(5.4, VMObj.totalCost(Basket), 0.0001);
       }

       @Test
       public void nullInCustomerBasket(){
         // VendingMachine VMObj = new VendingMachine();
         // ArrayList<Pair> Basket = new ArrayList<Pair>();
         //
         // Pair uno = new Pair("water", 1);
         // Pair incorrect = new Pair(null, 1);
         //
         // Basket.add(uno);
         // Basket.add(incorrect);
         // assertEquals(0, VMObj.totalCost(Basket), 0.0001);
       }

       // KATH TESTCASES for SPRINT 2 FUNCTIONS //

       /* Testcases checkValidCard(String input)
       - if input is valid
       - if input is not valid
       - if input is nullInPair
       */

       @Test
       public void validCardInput(){
         VendingMachine VMObj = new VendingMachine();
         String input = "12345678 0322\n";
         InputStream in = new ByteArrayInputStream(input.getBytes());
        System.setIn(in);
        //String output = "Not correct cc ";
        assertEquals(VMObj.checkValidCard(input), false);
       }

       @Test
       public void invalidCardInput(){
         VendingMachine VMObj = new VendingMachine();
         String input = "123456789\n";
         InputStream in = new ByteArrayInputStream(input.getBytes());
        System.setIn(in);
        String output = "Not correct cc ";
        assertEquals(VMObj.checkValidCard(input), false);
       }

       @Test
       public void nullCardInput(){
         VendingMachine VMObj = new VendingMachine();
         String input = "\n";
         InputStream in = new ByteArrayInputStream(input.getBytes());
        System.setIn(in);

        assertEquals(VMObj.checkValidCard(input), false);
       }

         /* Testcases inputCurrencyChoice()
         - correct currency input
         - null currency inputs
         - incorrect currency inputs
         */

        //  @Test
        //  public void correctCurrencyInput(){
        //    VendingMachine VMObj = new VendingMachine();
        //    String input = "AUD";
        //    InputStream in = new ByteArrayInputStream(input.getBytes());
        //   System.setIn(in);
        //   String output = "AUD";
        //   assertEquals(input, output);
        //  }
        //
        // @Test
        // public void nullCurrencyInputs(){
        //   VendingMachine VMObj = new VendingMachine();
        //   String input = null;
        //   InputStream in = new ByteArrayInputStream(input.getBytes());
        //  System.setIn(in);
        //  String output = "It Null";
        //  assertEquals(input, output);
        //
        // }

        // @Test
        // public void incorrectCurrencyInputs(){
        //   VendingMachine VMObj = new VendingMachine();
        //   String input = "";
        //   InputStream in = new ByteArrayInputStream(input.getBytes());
        //  System.setIn(in);
        //  String output = "It Null";
        //  assertEquals(input, output);
        // }


         /* Testcases printDailyTransactions()
         print
         */

         @Test
         public void correctDailyTransaction(){


         }

         /* Testcases printStock()
         print
         */

         @Test
         public void correctPrintStock(){
           Stock stocks = new Stock();
           System.out.println("Available Stock in the Vending Machine:");
           stocks.printDrinksStock();
           stocks.printChipsStock();
           stocks.printLolliesStock();
           stocks.printChocolatesStock();
           assertEquals(true, true);
         }

         /* Testcases printCancelledTransactions()
         - print out successfully
         */

         //
         @Test
         public void successfulCancelPrint(){
           VendingMachine vm = new VendingMachine();

           for(int i = 0; i< vm.cancelledTransactions.size(); i++){
             vm.cancelledTransactions.get(i).printCashTransaction();
           }

           assertEquals(true, true);

         }

         /* Testcases transactionFee(String userCurrency, double totalCost)
         - userCurrency is not legit
         - userCurrency is null
         - totalCost is null
          */

          @Test
          public void userCurrencyNotLegit(){
            VendingMachine VMObj = new VendingMachine();
          }

          @Test
          public void userCurrencyNull(){
            VendingMachine VMObj = new VendingMachine();
          }

          @Test
          public void totalCostNull(){
            VendingMachine VMObj = new VendingMachine();

          }

          // SPRINT 3

          // Payment testcases
          //@Test

          @Test
          public void displayTest1(){
            VendingMachine vm = new VendingMachine();
            vm.display();
            assertEquals(true, true);

          }

          @Test
          public void displayTest2(){
            VendingMachine vm = new VendingMachine();
            vm.display2();
            assertEquals(true, true);

          }

          // OBJECT COST STOCK CLASS TESTING

          @Test
          public void ObjectTestCase1(){
            VendingMachine vm = new VendingMachine();
            String snickers = "snickers";
            double cost = 1;
            int stock = 3;
            String name = "Snickers";

            ObjectCostStock testObject = new ObjectCostStock(snickers,  cost,  stock,  name) ;
            assertEquals("Snickers", testObject.getName());

          }

          @Test
          public void ObjectTestCase2(){
            VendingMachine vm = new VendingMachine();
            String snickers = "snickers";
            double cost = 1;
            int stock = 3;
            String name = "Snickers";

            ObjectCostStock testObject = new ObjectCostStock(snickers,  cost,  stock,  name) ;
            assertEquals(1, testObject.getCost(), 0.0001);

          }

          // @Test
          // public void ObjectTestCase3(){
          //   VendingMachine vm = new VendingMachine();
          //   String snickers = null;
          //   double cost = 1;
          //   int stock = 3;
          //   String name = "Snickers";
          //
          //   ObjectCostStock testObject = new ObjectCostStock(snickers,  cost,  stock,  name) ;
          //   assertEquals("Snickers", testObject.getName());
          //
          // }

}
